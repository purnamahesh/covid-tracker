{"version":3,"sources":["components/Navbar.js","screens/DistrictWide.js","components/StateWide.js","components/LineGraph.js","screens/Home.js","screens/About.js","App.js","index.js"],"names":["Navbar","className","to","type","data-bs-toggle","data-bs-target","id","DistrictWide","useState","district","setdistrict","dis","getDistrictsWise","a","fetch","then","res","text","data","Papa","parse","header","delimiter","newLine","forEach","item","undefined","push","useEffect","Object","keys","map","key","data-bs-parent","scope","District","Confirmed","Recovered","Deceased","Tested","Other","Box","title","val","color","style","background","StateWide","states","total","Fragment","Active","toString","State","Deaths","LineGraph","lables","label","classN","labels","datasets","borderWidth","borderColor","options","maintainAspectRatio","layout","padding","Home","national","Date","About","App","setNational","settotal","setStates","getNationalWise","getStateWise","pop","shift","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba0a4e14.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">Covid-19 Tracker</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapsenav\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className='collapse navbar-collapse' id=\"collapsenav\">\r\n                    <ul className=\"navbar-nav ms-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/districts\">District Wide</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useEffect, useState } from 'react'\r\nimport Papa from 'papaparse'\r\nfunction DistrictWide() {\r\n    const [district, setdistrict] = useState([])\r\n    var dis = {}\r\n    const getDistrictsWise = async () => {\r\n        const data = await fetch('https://api.covid19india.org/csv/latest/districts.csv')\r\n            .then(res => res.text())\r\n        const val = Papa.parse(data, {\r\n            header: true,\r\n            delimiter: ',',\r\n            newLine: '\\n'\r\n        }).data\r\n        val.forEach(item => {\r\n            if (dis[item[\"State\"]] === undefined) {\r\n                dis[item[\"State\"]] = [item]\r\n            } else {\r\n                dis[item[\"State\"]].push(item)\r\n            }\r\n        })\r\n        setdistrict(dis)\r\n    }\r\n    useEffect(() => {\r\n        getDistrictsWise()\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div className=\"accordion\" id=\"accordion\">\r\n                {\r\n                    Object.keys(district).map(key => (\r\n                        <div className=\"accordion-item\" key={key}>\r\n                            <h2 className=\"accordion-header\">\r\n                                <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target={`#collapse${key}`}>\r\n                                    {key}\r\n                                </button>\r\n                            </h2>\r\n                            <div id={`collapse${key}`} className=\"accordion-collapse collapse\" data-bs-parent=\"#accordion\">\r\n                                <div className=\"accordion-body table-responsive-sm\">\r\n                                    <table className=\"table table-striped table-hover\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">District</th>\r\n                                                <th scope=\"col\">Confirmed</th>\r\n                                                <th scope=\"col\">Recovered</th>\r\n                                                <th scope=\"col\">Deceased</th>\r\n                                                <th scope=\"col\">Tested</th>\r\n                                                <th scope=\"col\">Other</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                district[key].map(item => (\r\n                                                    <tr>\r\n                                                        <th scope=\"row\">{item.District}</th>\r\n                                                        <td>{item.Confirmed}</td>\r\n                                                        <td>{item.Recovered}</td>\r\n                                                        <td>{item.Deceased}</td>\r\n                                                        <td>{item.Tested}</td>\r\n                                                        <td>{item.Other}</td>\r\n                                                    </tr>\r\n                                                ))\r\n                                            }\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DistrictWide\r\n","import React, { useState, useEffect } from 'react'\r\nimport Papa from 'papaparse'\r\n\r\nfunction Box({ title, val, color }) {\r\n    return (\r\n        <div className=\"col m-2 card-box p-2\" style={{ background: color }}>\r\n            <h6>{title}</h6>\r\n            <br />\r\n            <h3>{val}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction StateWide({ states, total }) {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row mb-5 px-5 text-center\">\r\n                <Box color=\"#ff073a\" title=\"Confirmed\" val={total.Confirmed} />\r\n                <Box color=\"#007bff\" title=\"Active\" val={total.Active} />\r\n                <Box color=\"#28a745\" title=\"Recovered\" val={total.Recovered} />\r\n                <Box color=\"#6c757d\" title=\"Deceased\" val={(total.Confirmed - total.Recovered - total.Active).toString()} />\r\n            </div>\r\n            <div className=\"table-responsive\" id=\"state-wide-table\">\r\n                <table className=\"table table-sm table-striped text-center table-hover\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th scope=\"col\">State</th>\r\n                            <th scope=\"col\">Active</th>\r\n                            <th scope=\"col\">Confirmed</th>\r\n                            <th scope=\"col\">Deaths</th>\r\n                            <th scope=\"col\">Recovered</th>\r\n                            <th scope=\"col\">Deceased</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            states.map(item => (\r\n                                <tr key={item.State}>\r\n                                    <th scope=\"row\">{item.State}</th>\r\n                                    <td>{item.Active}</td>\r\n                                    <td>{item.Confirmed}</td>\r\n                                    <td>{item.Deaths}</td>\r\n                                    <td>{item.Recovered}</td>\r\n                                    <td>{item.Confirmed - item.Recovered - item.Active}</td>\r\n                                </tr>\r\n                            ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default StateWide\r\n","import { Line } from 'react-chartjs-2'\r\nimport React from 'react'\r\nimport '../app.css'\r\nfunction LineGraph({ lables, label, data, color, classN }) {\r\n    return (\r\n        <div className=\"row m-0\">\r\n            <div className=\"col\">\r\n                <Line className={classN}\r\n                    data={{\r\n\r\n                        labels: lables,\r\n                        datasets: [\r\n                            {\r\n                                label: label,\r\n                                data: data,\r\n                                borderWidth: 1,\r\n                                color: 'white',\r\n                                borderColor: color,\r\n                            },\r\n                        ]\r\n                    }}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        /*responsive: true, */\r\n                        layout: {\r\n                            padding: 40\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;","import React from 'react'\r\nimport StateWide from '../components/StateWide'\r\nimport LineGraph from '../components/LineGraph'\r\n\r\nfunction Home({ national, states, total }) {\r\n    const labels = national.map(item => item.Date)\r\n    return (\r\n        <div className=\"container-fluid mt-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <StateWide states={states} total={total} />\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <LineGraph lables={labels} label=\"Daily Confirmed\" data={national.map(item => item[\"Daily Confirmed\"])} color=\"red\" classN=\"graph\" />\r\n                    <LineGraph lables={labels} label=\"Daily Deceased\" data={national.map(item => item[\"Daily Deceased\"])} color=\"brown\" classN=\"graph\" />\r\n                    <LineGraph lables={labels} label=\"Daily Recovered\" data={national.map(item => item[\"Daily Recovered\"])} color=\"green\" classN=\"graph\" />\r\n                    <LineGraph lables={labels} label=\"Total Confirmed\" data={national.map(item => item[\"Total Confirmed\"])} color=\"crimson\" classN=\"graph\" />\r\n                    <LineGraph lables={labels} label=\"Total Deceased\" data={national.map(item => item[\"Total Deceased\"])} color=\"darkred\" classN=\"graph\" />\r\n                    <LineGraph lables={labels} label=\"Total Recovered\" data={national.map(item => item[\"Total Recovered\"])} color=\"teal\" classN=\"graph\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import './lux.css'\nimport './app.css'\nimport Navbar from './components/Navbar'\nimport DistrictWide from './screens/DistrictWide'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Home from './screens/Home'\nimport About from './screens/About'\nimport Papa from 'papaparse'\nimport React, { useState, useEffect } from 'react'\n\nfunction App() {\n  const [national, setNational] = useState([])\n  const [total, settotal] = useState([])\n  const [states, setStates] = useState([])\n\n  const getNationalWise = async () => {\n    const data = await fetch('https://api.covid19india.org/csv/latest/case_time_series.csv')\n      .then(res => res.text())\n    const val = Papa.parse(data, {\n      header: true,\n      delimiter: ',',\n      newLine: '\\n'\n    }).data\n    setNational(val)\n    /* console.log(val) */\n  }\n  const getStateWise = async () => {\n    const data = await fetch('https://api.covid19india.org/csv/latest/state_wise.csv')\n      .then(res => res.text())\n    const val = Papa.parse(data, {\n      header: true,\n      delimiter: ',',\n      newLine: '\\n'\n    }).data\n    val.pop()\n    settotal(val.shift())\n    setStates(val)\n    /* console.log(val) */\n  }\n\n  useEffect(() => {\n    if (national !== [])\n      getNationalWise()\n    if (states !== [])\n      getStateWise()\n  }, [])\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home national={national} states={states} total={total} />\n          </Route>\n          <Route path=\"/districts\">\n            <DistrictWide /* states={states} */ />\n          </Route>\n          <Route path=\"/about\" component={About} />\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}